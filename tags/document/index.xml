<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Document on Koyomi</title>
    <link>http://key-amb.github.io/App-Koyomi-Doc/tags/document/</link>
    <description>Recent content in Document on Koyomi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, YASUTAKE Kiyoshi; All rights reserved.</copyright>
    <lastBuildDate>Fri, 29 May 2015 00:29:01 +0900</lastBuildDate>
    <atom:link href="http://key-amb.github.io/App-Koyomi-Doc/tags/document/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://key-amb.github.io/App-Koyomi-Doc/about/</link>
      <pubDate>Fri, 29 May 2015 00:29:01 +0900</pubDate>
      
      <guid>http://key-amb.github.io/App-Koyomi-Doc/about/</guid>
      <description>

&lt;h2 id=&#34;version:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;VERSION&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;v0.1.2&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;milestone:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;MILESTONE&lt;/h2&gt;

&lt;p&gt;Here are what I plan to implement to &lt;em&gt;Koyomi&lt;/em&gt; towards &lt;strong&gt;&lt;em&gt;v1.0.0&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CommandLine Interface&lt;/strong&gt; for CRUD of job schedule.&lt;/li&gt;
&lt;li&gt;Enable to specify which &lt;em&gt;OS user&lt;/em&gt; executes the &lt;em&gt;job command&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Divide &lt;em&gt;job timetable&lt;/em&gt; from job entity so that you can configure one job to run on multiple schedulings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semaphore&lt;/strong&gt; or &lt;strong&gt;Mutex&lt;/strong&gt; for job execution so that you can avoid a long-time job to run coincidently.&lt;/li&gt;
&lt;li&gt;Concept of &lt;strong&gt;job timeout&lt;/strong&gt;. When &lt;em&gt;semphore&lt;/em&gt; or &lt;em&gt;mutex&lt;/em&gt; is implemented, a job must free it after job finishes.
But a job might fail without cleaning it up properly.&lt;br /&gt;
So after some time, it&amp;rsquo;s prefered to assume the job failed.
Then let&amp;rsquo;s call that time &lt;em&gt;Timeout&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;license:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;LICENSE&lt;/h2&gt;

&lt;p&gt;Copyright &amp;copy; YASUTAKE Kiyoshi.&lt;/p&gt;

&lt;p&gt;This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.&lt;/p&gt;

&lt;h2 id=&#34;author:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;AUTHOR&lt;/h2&gt;

&lt;p&gt;YASUTAKE Kiyoshi yasutake.kiyoshi@gmail.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://key-amb.github.io/App-Koyomi-Doc/bootstrap/</link>
      <pubDate>Fri, 29 May 2015 00:25:13 +0900</pubDate>
      
      <guid>http://key-amb.github.io/App-Koyomi-Doc/bootstrap/</guid>
      <description>

&lt;h2 id=&#34;install:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;Currently &lt;strong&gt;Koyomi&lt;/strong&gt; is available on GitHub and CPAN.&lt;/p&gt;

&lt;h3 id=&#34;from-github:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;From GitHub&lt;/h3&gt;

&lt;p&gt;You can download archive files from &lt;a href=&#34;https://github.com/key-amb/perl5-App-Koyomi/releases&#34;&gt;https://github.com/key-amb/perl5-App-Koyomi/releases&lt;/a&gt; .&lt;/p&gt;

&lt;h3 id=&#34;from-cpan:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;From CPAN&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cpanm App::Koyomi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;#&#34;&gt;top&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configure:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Configure&lt;/h2&gt;

&lt;p&gt;The default configuration file is &lt;code&gt;config/default.toml&lt;/code&gt;.&lt;br /&gt;
You can edit the file for customization.
Or when you want to use the configuration file in another path, you can specify
the path by environmental variable &lt;code&gt;$KOYOMI_CONFIG_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following content shows available configuration parametes in the file.&lt;/p&gt;

&lt;h3 id=&#34;general-parameters:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;General Parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;time_zone = &amp;quot;Asia/Tokyo&amp;quot; # Local time zone is used when not specified

# Enable some debug parameters (see &amp;quot;Debug Parameters&amp;quot; below)
# Don&#39;t set &amp;quot;true&amp;quot; on production environment.
debug_mode = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-parameters:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Logging Parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[log]
debug   = true            # Enable debug log
console = true            # Output to stderr
file    = true            # Output to log file
file_path = /path/to/log  # Log file path
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;job-scheduling-parameters:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Job Scheduling Parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[worker]
interval_minutes = 1 # Worker interval

# Must be shorter than interval_minutes
minimum_interval_seconds = 30

[schedule]
update_interval_seconds = 120 # How often it re-fetch schedule from Datastore

[job]
# Must be shorter than worker.minimum_interval_seconds
lock_ttl_seconds = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;worker.interval_minutes = 1&lt;/code&gt;, &lt;em&gt;koyomi worker&lt;/em&gt; wakes up and execute scheduled jobs at that time once a minute like &lt;strong&gt;cron&lt;/strong&gt; daemon.
You can customize the parameter for longer intervals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Koyomi worker&lt;/em&gt; tries to wake up when the second of time equals &lt;code&gt;00&lt;/code&gt; (ex: &lt;code&gt;T09:03:00&lt;/code&gt;).
But it sleeps at least &lt;code&gt;worker.minimum_interval_seconds&lt;/code&gt; every after spawning jobs once a &lt;code&gt;worker.interval_minutes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if you start &lt;em&gt;koyomi worker&lt;/em&gt; at &lt;code&gt;T09:02:55&lt;/code&gt; and given &lt;code&gt;worker.minimum_interval_seconds = 30&lt;/code&gt;, next time &lt;em&gt;wokrer&lt;/em&gt; wakes up at &lt;code&gt;T09:03:25&lt;/code&gt;, after that &lt;code&gt;T09:04:00&lt;/code&gt;, then &lt;code&gt;T09:05:00&lt;/code&gt;, &amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Koyomi worker&lt;/em&gt; fetches jobs schedule from &lt;strong&gt;Datastore&lt;/strong&gt; on start-up, and refetch it every after &lt;code&gt;schedule.update_interval_seconds&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Multiple &lt;em&gt;koyomi workers&lt;/em&gt; are supposed to run with the same schedule &lt;em&gt;datastore&lt;/em&gt;.&lt;br /&gt;
Only one &lt;em&gt;koyomi worker&lt;/em&gt; runs a certain job at a time.&lt;/p&gt;

&lt;p&gt;When a &lt;em&gt;koyomi worker&lt;/em&gt; wins to run a job, it records on &lt;em&gt;datastore&lt;/em&gt; the &amp;ldquo;time&amp;rdquo; and the &amp;ldquo;hostname&amp;rdquo; and the &amp;ldquo;process id&amp;rdquo;.&lt;br /&gt;
On the other hand, another &lt;em&gt;koyomi worker&lt;/em&gt; tries to run the job around the time.&lt;br /&gt;
But with the job record in &lt;em&gt;datastore&lt;/em&gt;, it knows the other &lt;em&gt;worker&lt;/em&gt; has run it.&lt;br /&gt;
When one &lt;em&gt;worker&lt;/em&gt; has run a job within &lt;code&gt;job.lock_ttl_seconds&lt;/code&gt;, the other &lt;em&gt;workers&lt;/em&gt; quit to run the job.&lt;/p&gt;

&lt;h3 id=&#34;data-source-parameters:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Data Source Parameters&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[datasource.module]
job       = &amp;quot;Teng&amp;quot;
semaphore = &amp;quot;Teng&amp;quot;

[datasource.connector]
dsn      = &amp;quot;dbi:mysql:database=koyomi;host=127.0.0.1;port=3306&amp;quot;
user     = &amp;quot;root&amp;quot;
password = &amp;quot;&amp;quot;

# Can override for each entity
[datasource.connector.job]
dsn  = ...
user = &amp;quot;foo&amp;quot;
password = &amp;quot;xxx&amp;quot;

[datasource.connector.semaphore]
# Can override &amp;quot;datasource.connector&amp;quot;, too.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify perl module to access each entity in &lt;em&gt;datastore&lt;/em&gt;.&lt;br /&gt;
Currently, supported module is &lt;code&gt;Teng&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;Datasource &lt;code&gt;job&lt;/code&gt; stands for job schedules.&lt;br /&gt;
Datasource &lt;code&gt;semaphore&lt;/code&gt; stands for the record and lock entity which controls if one &lt;em&gt;koyomi worker&lt;/em&gt; can run a job or not.&lt;/p&gt;

&lt;h2 id=&#34;set-up-datastore:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;Set Up Datastore&lt;/h2&gt;

&lt;p&gt;Here are descriptions about how to set up &lt;em&gt;datastore&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;mysql:caf96f80dec81066bbd3e06dfe6b4d25&#34;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;MySQL database schema is available at &lt;code&gt;schema/koyomi.ddl&lt;/code&gt; in the source code.&lt;/p&gt;

&lt;p&gt;You will register &lt;code&gt;jobs&lt;/code&gt; by mysql client command or something else.&lt;/p&gt;

&lt;p&gt;NOTE:&lt;br /&gt;
You have to create a &lt;code&gt;semaphores&lt;/code&gt; record whose &lt;em&gt;job_id&lt;/em&gt; equals to &lt;em&gt;id&lt;/em&gt; of registered &lt;code&gt;jobs&lt;/code&gt; record.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>